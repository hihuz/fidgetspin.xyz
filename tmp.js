goog.module('index'); exports = {}; var module = {id: 'index.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('./sw.js').then(function () {
        console.log('service worker is is all cool.');
    }).catch(function (e) {
        console.error('service worker is not so cool.', e);
        throw e;
    });
    if (navigator.serviceWorker.controller) {
        // Correctly prompt the user to reload during SW phase change.
        navigator.serviceWorker.controller.onstatechange = (e) => {
            if (((e.target)).state === 'redundant') {
                ((((document.querySelector('#reload-prompt'))))).classList.remove('hidden');
            }
        };
    }
}
// thx https://github.com/Modernizr/Modernizr/blob/master/feature-detects/pointerevents.js
const /** @type {?} */ USE_POINTER_EVENTS = 'onpointerdown' in document.createElement('div');
let /** @type {?} */ velocity = 0;
const /** @type {?} */ ac = new (typeof webkitAudioContext !== 'undefined' ? webkitAudioContext : AudioContext)();
const /** @type {?} */ masterVolume = ac.createGain();
masterVolume.connect(ac.destination);
const /** @type {?} */ appState = {
    pickerOpen: false,
    spinner: window.localStorage.getItem('fidget_spinner') || './assets/spinners/base.png',
    muted: window.localStorage.getItem('fidget_muted') === 'true' ? true : false,
    spins: window.localStorage.getItem('fidget_spins') ? parseInt(/** @type {?} */ ((window.localStorage.getItem('fidget_spins'))), 10) : 0,
    maxVelocity: window.localStorage.getItem('fidget_max_velocity') ? parseInt(/** @type {?} */ ((window.localStorage.getItem('fidget_max_velocity'))), 10) : 0
};
const /** @type {?} */ spinners = [
    {
        path: './assets/spinners/base.png',
        name: 'The Classic',
        unlockedAt: 0
    },
    {
        path: './assets/spinners/triple.png',
        name: 'The Triple',
        unlockedAt: 500
    },
    {
        path: './assets/spinners/pokeball.png',
        name: 'The \'Chu',
        unlockedAt: 2000
    },
    {
        path: './assets/spinners/cube.png',
        name: 'The Cubist',
        unlockedAt: 5000
    },
    {
        path: './assets/spinners/fractal.png',
        name: 'The Fractal',
        unlockedAt: 10000
    },
];
const /** @type {?} */ domElements = {
    turns: /** @type {?} */ ((document.getElementById('turns'))),
    velocity: /** @type {?} */ ((document.getElementById('velocity'))),
    maxVelocity: /** @type {?} */ ((document.getElementById('maxVelocity'))),
    spinner: /** @type {?} */ ((document.getElementById('spinner'))),
    traceSlow: /** @type {?} */ ((document.getElementById('trace-slow'))),
    traceFast: /** @type {?} */ ((document.getElementById('trace-fast'))),
    toggleAudio: /** @type {?} */ ((document.getElementById('toggle-audio'))),
    spinners: /** @type {?} */ (Array.from(/** @type {?} */ ((document.getElementsByClassName('spinner'))))),
    pickerToggle: /** @type {?} */ ((document.getElementById('picker'))),
    pickerPane: /** @type {?} */ ((document.getElementById('spinner-picker')))
};
let /** @type {?} */ fidgetAlpha = 0;
let /** @type {?} */ fidgetSpeed = 0;
/**
 * @param {?} fn
 * @return {?}
 */
function deferWork(fn) {
    if ((typeof requestIdleCallback) !== 'undefined') {
        requestIdleCallback(fn, { timeout: 60 });
    }
    else if (typeof requestAnimationFrame !== 'undefined') {
        requestAnimationFrame(fn);
    }
    else {
        setTimeout(fn, 16.66);
    }
}
/**
 * @return {?}
 */
function stats() {
    velocity = Math.abs(fidgetSpeed * 60 /* fps */ * 60 /* sec */ / 2 / Math.PI) | 0;
    const /** @type {?} */ newMaxVelocity = Math.max(velocity, appState.maxVelocity);
    if (appState.maxVelocity !== newMaxVelocity) {
        deferWork(() => window.localStorage.setItem('fidget_max_velocity', `${appState.maxVelocity}`));
        appState.maxVelocity = newMaxVelocity;
    }
    appState.spins += Math.abs(fidgetSpeed / 2 / Math.PI);
    deferWork(() => window.localStorage.setItem('fidget_spins', `${appState.spins}`));
    const /** @type {?} */ turnsText = appState.spins.toLocaleString(undefined, { maximumFractionDigits: 0 });
    const /** @type {?} */ maxVelText = appState.maxVelocity.toLocaleString(undefined, { maximumFractionDigits: 1 });
    domElements.turns.textContent = `${turnsText}`;
    domElements.velocity.textContent = `${velocity}`;
    domElements.maxVelocity.textContent = `${maxVelText}`;
}
const /** @type {?} */ spinnerPos = domElements.spinner.getBoundingClientRect();
const /** @type {?} */ centerX = spinnerPos.left + spinnerPos.width / 2;
const /** @type {?} */ centerY = spinnerPos.top + spinnerPos.height / 2;
const /** @type {?} */ centerRadius = spinnerPos.width / 10;
//
// Spin code
//
const /** @type {?} */ touchInfo = { alpha: 0, radius: 0, down: false };
let /** @type {?} */ touchSpeed = 0;
let /** @type {?} */ lastTouchAlpha = 0;
/**
 * @param {?} e
 * @return {?}
 */
function getXYFromTouchOrPointer(e) {
    let /** @type {?} */ x = 'touches' in e ? ((e)).touches[0].clientX : ((e)).clientX;
    let /** @type {?} */ y = 'touches' in e ? ((e)).touches[0].clientY : ((e)).clientY;
    return { x: x - centerX, y: y - centerY };
}
/**
 * @param {?} e
 * @return {?}
 */
function onTouchStart(e) {
    if (appState.pickerOpen) {
        return;
    }
    let { x, y } = getXYFromTouchOrPointer(e);
    onTouchMove(e);
    touchInfo.down = true;
    touchInfo.radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    lastTouchAlpha = touchInfo.alpha;
}
/**
 * @param {?} e
 * @return {?}
 */
function onTouchMove(e) {
    if (appState.pickerOpen) {
        return;
    }
    let { x, y } = getXYFromTouchOrPointer(e);
    touchInfo.alpha = Math.atan2(x, y);
    e.preventDefault();
}
/**
 * @return {?}
 */
function touchEnd() {
    if (appState.pickerOpen) {
        return;
    }
    touchInfo.down = false;
}
/**
 * @return {?}
 */
function tick() {
    requestAnimationFrame(() => {
        if (touchInfo.down) {
            if (touchInfo.radius > centerRadius) {
                touchSpeed = touchInfo.alpha - lastTouchAlpha;
                if (touchSpeed < -Math.PI)
                    touchSpeed += 2 * Math.PI;
                if (touchSpeed > Math.PI)
                    touchSpeed -= 2 * Math.PI;
                fidgetSpeed = touchSpeed;
                lastTouchAlpha = touchInfo.alpha;
            }
        }
        else if (touchSpeed) {
            fidgetSpeed = touchSpeed * touchInfo.radius / centerRadius;
            touchSpeed = 0;
        }
        fidgetAlpha -= fidgetSpeed;
        domElements.spinner.style.transform = `rotate(${fidgetAlpha}rad)`;
        domElements.traceSlow.style.opacity = Math.abs(fidgetSpeed) > 0.2 ? '1' : '0.00001';
        domElements.traceFast.style.opacity = Math.abs(fidgetSpeed) > 0.4 ? '1' : '0.00001';
        stats();
        // Slow down over time
        fidgetSpeed = fidgetSpeed * 0.99;
        fidgetSpeed = Math.sign(fidgetSpeed) * Math.max(0, (Math.abs(fidgetSpeed) - 2e-4));
        const /** @type {?} */ soundMagnitude = Math.abs(velocity * Math.PI / 60);
        if (soundMagnitude && !touchInfo.down) {
            spinSound(soundMagnitude);
            spinSound2(soundMagnitude);
        }
        tick();
    });
}
//
// Audio code
//
let /** @type {?} */ endPlayTime = -1;
let /** @type {?} */ endPlayTime2 = -1;
/**
 * @record
 */
function rangeArgs() { }
/** @type {?} */
rangeArgs.prototype.inputMin;
/** @type {?} */
rangeArgs.prototype.inputMax;
/** @type {?} */
rangeArgs.prototype.outputFloor;
/** @type {?} */
rangeArgs.prototype.outputCeil;
;
/**
 * @param {?} args
 * @return {?}
 */
function generateRange(args) {
    return function (x) {
        const /** @type {?} */ outputRange = args.outputCeil - args.outputFloor;
        const /** @type {?} */ inputPct = (x - args.inputMin) / (args.inputMax - args.inputMin);
        return args.outputFloor + (inputPct * outputRange);
    };
}
const /** @type {?} */ freqRange400_2000 = generateRange({
    inputMin: 0,
    inputMax: 80,
    outputFloor: 400,
    outputCeil: 2000
});
const /** @type {?} */ freqRange300_1500 = generateRange({
    inputMin: 0,
    inputMax: 80,
    outputFloor: 300,
    outputCeil: 1500
});
const /** @type {?} */ easeOutQuad = (t) => t * (2 - t);
/**
 * @param {?} magnitude
 * @return {?}
 */
function spinSound(magnitude) {
    // automation start time
    let /** @type {?} */ time = ac.currentTime;
    const /** @type {?} */ freqMagnitude = magnitude;
    magnitude = Math.min(1, magnitude / 10);
    let /** @type {?} */ x = (easeOutQuad(magnitude) * 1.1) - (0.6 - (0.6 * easeOutQuad(magnitude)));
    if (time + x - easeOutQuad(magnitude) < endPlayTime) {
        return;
    }
    const /** @type {?} */ osc = ac.createOscillator();
    const /** @type {?} */ gain = ac.createGain();
    // enforce range
    magnitude = Math.min(1, Math.max(0, magnitude));
    osc.type = 'triangle';
    osc.connect(gain);
    gain.connect(masterVolume);
    // max of 40 boops
    //const count = 6 + ( 1 * magnitude );
    // decay constant for frequency between each boop
    //const decay = 0.97;
    // starting frequency (min of 400, max of 900)
    let /** @type {?} */ freq = freqRange400_2000(freqMagnitude);
    // boop duration (longer for lower magnitude)
    let /** @type {?} */ dur = 0.1 * (1 - magnitude / 2);
    osc.frequency.setValueAtTime(freq, time);
    osc.frequency.linearRampToValueAtTime(freq * 1.8, time += dur);
    endPlayTime = time + dur;
    // fade out the last boop
    gain.gain.setValueAtTime(0.1, ac.currentTime);
    gain.gain.linearRampToValueAtTime(0, endPlayTime);
    // play it
    osc.start(ac.currentTime);
    osc.stop(endPlayTime);
}
/**
 * @param {?} magnitude
 * @return {?}
 */
function spinSound2(magnitude) {
    // automation start time
    let /** @type {?} */ time = ac.currentTime;
    const /** @type {?} */ freqMagnitude = magnitude;
    magnitude = Math.min(1, magnitude / 10);
    let /** @type {?} */ x = (easeOutQuad(magnitude) * 1.1) - (0.3 - (0.3 * easeOutQuad(magnitude)));
    if (time + x - easeOutQuad(magnitude) < endPlayTime2) {
        return;
    }
    const /** @type {?} */ osc = ac.createOscillator();
    const /** @type {?} */ gain = ac.createGain();
    // enforce range
    magnitude = Math.min(1, Math.max(0, magnitude));
    osc.type = 'sine';
    osc.connect(gain);
    gain.connect(masterVolume);
    var /** @type {?} */ freq = freqRange300_1500(freqMagnitude);
    // boop duration (longer for lower magnitude)
    var /** @type {?} */ dur = 0.05 * (1 - magnitude / 2);
    osc.frequency.setValueAtTime(freq, time);
    osc.frequency.linearRampToValueAtTime(freq * 1.8, time += dur);
    endPlayTime2 = time + dur;
    // fade out the last boop
    gain.gain.setValueAtTime(0.15, ac.currentTime);
    gain.gain.linearRampToValueAtTime(0, endPlayTime2);
    // play it
    osc.start(ac.currentTime);
    osc.stop(endPlayTime2);
}
/**
 * @return {?}
 */
function unlockAudio() {
    /**
     * @return {?}
     */
    function unlock() {
        // Create an empty buffer.
        const /** @type {?} */ source = ac.createBufferSource();
        source.buffer = ac.createBuffer(1, 1, 22050);
        ;
        source.connect(ac.destination);
        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
            ((source)).noteOn(0);
        }
        else {
            source.start(0);
        }
        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function () {
            source.disconnect(0);
            // Remove the touch start listener.
            document.removeEventListener('touchend', unlock, true);
        };
    }
    document.addEventListener('touchend', unlock, true);
}
/**
 * @param {?} muted
 * @return {?}
 */
function setMutedSideEffects(muted) {
    domElements.toggleAudio.classList.toggle('muted', muted);
    masterVolume.gain.setValueAtTime(appState.muted ? 0 : 1, ac.currentTime);
    window.localStorage.setItem('fidget_muted', `${appState.muted}`);
}
/**
 * @return {?}
 */
function togglePicker() {
    if (appState.pickerOpen !== true) {
        appState.pickerOpen = !appState.pickerOpen;
        history.pushState(appState, '', '#picker');
        showPicker();
    }
    else {
        history.back();
    }
}
/**
 * @param {?} e
 * @return {?}
 */
function toggleAudio(e) {
    appState.muted = !appState.muted;
    setMutedSideEffects(appState.muted);
    // if something is spinning, we do not want to stop it if you touch the menu.
    e.stopPropagation();
}
/**
 * @param {?} src
 * @return {?}
 */
function changeSpinner(src) {
    appState.spinner = src;
    deferWork(() => window.localStorage.setItem('fidget_spinner', src));
    for (let /** @type {?} */ s of domElements.spinners) {
        s.src = src;
    }
}
/**
 * @param {?} e
 * @return {?}
 */
function pickSpinner(e) {
    const /** @type {?} */ target = (e.target);
    if (target.tagName === 'IMG' && !target.classList.contains('locked')) {
        changeSpinner(((e.target)).src);
        togglePicker();
    }
}
/**
 * @return {?}
 */
function showPicker() {
    domElements.pickerPane.innerHTML = '';
    let /** @type {?} */ toAppend = '';
    for (let /** @type {?} */ spinner of spinners) {
        toAppend += `<li><p class="title">${spinner.name}</p>`;
        if (spinner.unlockedAt >= appState.spins) {
            toAppend += `<img width="300" height="300" class="locked" src="${spinner.path}"><p class="locked-info">Unlocks at ${spinner.unlockedAt} spins</p>`;
        }
        else {
            toAppend += `<img width="300" height="300" src="${spinner.path}">`;
        }
        toAppend += '</li>';
    }
    domElements.pickerPane.innerHTML = toAppend;
    domElements.pickerPane.classList.remove('hidden');
    domElements.pickerPane.scrollTop = 0;
}
(async () => {
    setMutedSideEffects(appState.muted);
    unlockAudio();
    tick();
    const /** @type {?} */ listenFor = (document.addEventListener);
    domElements.pickerToggle.addEventListener(USE_POINTER_EVENTS ? 'pointerdown' : 'touchstart', togglePicker);
    domElements.pickerPane.addEventListener('click', pickSpinner);
    domElements.toggleAudio.addEventListener(USE_POINTER_EVENTS ? 'pointerdown' : 'touchstart', toggleAudio);
    listenFor(USE_POINTER_EVENTS ? 'pointerdown' : 'touchstart', onTouchStart, { passive: false });
    listenFor(USE_POINTER_EVENTS ? 'pointermove' : 'touchmove', onTouchMove, { passive: false });
    listenFor(USE_POINTER_EVENTS ? 'pointerup' : 'touchend', touchEnd);
    listenFor(USE_POINTER_EVENTS ? 'pointercancel' : 'touchcancel', touchEnd);
    // Assume clean entry always.
    history.replaceState(null, '', '/');
    changeSpinner(appState.spinner);
    window.onpopstate = (e) => {
        // Assume if state is not set here picker is going to need to close.
        if (e.state === null) {
            appState.pickerOpen = false;
            domElements.pickerPane.classList.add('hidden');
            // Assume if state is set here picker is going to need to open.
        }
        else if (e.state !== null) {
            appState.pickerOpen = true;
            showPicker();
        }
    };
})();
//# sourceMappingURL=data:application/json;base64,